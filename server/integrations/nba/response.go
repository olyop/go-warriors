// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package nba

type NBAAPIGamesResponseJson struct {
	// Errors corresponds to the JSON schema field "errors".
	Errors NBAAPIGamesResponseJsonErrors `json:"errors,omitempty" yaml:"errors,omitempty" mapstructure:"errors,omitempty"`

	// Get corresponds to the JSON schema field "get".
	Get *string `json:"get,omitempty" yaml:"get,omitempty" mapstructure:"get,omitempty"`

	// Parameters corresponds to the JSON schema field "parameters".
	Parameters *NBAAPIGamesResponseJsonParameters `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`

	// Response corresponds to the JSON schema field "response".
	Response []NBAAPIGamesResponseJsonResponseElem `json:"response,omitempty" yaml:"response,omitempty" mapstructure:"response,omitempty"`

	// Results corresponds to the JSON schema field "results".
	Results *float64 `json:"results,omitempty" yaml:"results,omitempty" mapstructure:"results,omitempty"`
}

type NBAAPIGamesResponseJsonErrors map[string]interface{}

type NBAAPIGamesResponseJsonParameters struct {
	// Date corresponds to the JSON schema field "date".
	Date *string `json:"date,omitempty" yaml:"date,omitempty" mapstructure:"date,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElem struct {
	// Arena corresponds to the JSON schema field "arena".
	Arena NBAAPIGamesResponseJsonResponseElemArena `json:"arena" yaml:"arena" mapstructure:"arena"`

	// Date corresponds to the JSON schema field "date".
	Date NBAAPIGamesResponseJsonResponseElemDate `json:"date" yaml:"date" mapstructure:"date"`

	// ID corresponds to the JSON schema field "id".
	ID float64 `json:"id" yaml:"id" mapstructure:"id"`

	// LeadChanges corresponds to the JSON schema field "leadChanges".
	LeadChanges interface{} `json:"leadChanges" yaml:"leadChanges" mapstructure:"leadChanges"`

	// League corresponds to the JSON schema field "league".
	League string `json:"league" yaml:"league" mapstructure:"league"`

	// Nugget corresponds to the JSON schema field "nugget".
	Nugget interface{} `json:"nugget" yaml:"nugget" mapstructure:"nugget"`

	// Officials corresponds to the JSON schema field "officials".
	Officials []interface{} `json:"officials" yaml:"officials" mapstructure:"officials"`

	// Periods corresponds to the JSON schema field "periods".
	Periods NBAAPIGamesResponseJsonResponseElemPeriods `json:"periods" yaml:"periods" mapstructure:"periods"`

	// Scores corresponds to the JSON schema field "scores".
	Scores NBAAPIGamesResponseJsonResponseElemScores `json:"scores" yaml:"scores" mapstructure:"scores"`

	// Season corresponds to the JSON schema field "season".
	Season float64 `json:"season" yaml:"season" mapstructure:"season"`

	// Stage corresponds to the JSON schema field "stage".
	Stage float64 `json:"stage" yaml:"stage" mapstructure:"stage"`

	// Status corresponds to the JSON schema field "status".
	Status NBAAPIGamesResponseJsonResponseElemStatus `json:"status" yaml:"status" mapstructure:"status"`

	// Teams corresponds to the JSON schema field "teams".
	Teams NBAAPIGamesResponseJsonResponseElemTeams `json:"teams" yaml:"teams" mapstructure:"teams"`

	// TimesTied corresponds to the JSON schema field "timesTied".
	TimesTied interface{} `json:"timesTied" yaml:"timesTied" mapstructure:"timesTied"`
}

type NBAAPIGamesResponseJsonResponseElemArena struct {
	// City corresponds to the JSON schema field "city".
	City *string `json:"city,omitempty" yaml:"city,omitempty" mapstructure:"city,omitempty"`

	// Country corresponds to the JSON schema field "country".
	Country interface{} `json:"country,omitempty" yaml:"country,omitempty" mapstructure:"country,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// State corresponds to the JSON schema field "state".
	State *string `json:"state,omitempty" yaml:"state,omitempty" mapstructure:"state,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemDate struct {
	// Duration corresponds to the JSON schema field "duration".
	Duration interface{} `json:"duration,omitempty" yaml:"duration,omitempty" mapstructure:"duration,omitempty"`

	// End corresponds to the JSON schema field "end".
	End interface{} `json:"end,omitempty" yaml:"end,omitempty" mapstructure:"end,omitempty"`

	// Start corresponds to the JSON schema field "start".
	Start *string `json:"start,omitempty" yaml:"start,omitempty" mapstructure:"start,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemPeriods struct {
	// Current corresponds to the JSON schema field "current".
	Current *float64 `json:"current,omitempty" yaml:"current,omitempty" mapstructure:"current,omitempty"`

	// EndOfPeriod corresponds to the JSON schema field "endOfPeriod".
	EndOfPeriod *bool `json:"endOfPeriod,omitempty" yaml:"endOfPeriod,omitempty" mapstructure:"endOfPeriod,omitempty"`

	// Total corresponds to the JSON schema field "total".
	Total *float64 `json:"total,omitempty" yaml:"total,omitempty" mapstructure:"total,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemScores struct {
	// Home corresponds to the JSON schema field "home".
	Home *NBAAPIGamesResponseJsonResponseElemScoresHome `json:"home,omitempty" yaml:"home,omitempty" mapstructure:"home,omitempty"`

	// Visitors corresponds to the JSON schema field "visitors".
	Visitors *NBAAPIGamesResponseJsonResponseElemScoresVisitors `json:"visitors,omitempty" yaml:"visitors,omitempty" mapstructure:"visitors,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemScoresHome struct {
	// Linescore corresponds to the JSON schema field "linescore".
	Linescore []string `json:"linescore,omitempty" yaml:"linescore,omitempty" mapstructure:"linescore,omitempty"`

	// Loss corresponds to the JSON schema field "loss".
	Loss *float64 `json:"loss,omitempty" yaml:"loss,omitempty" mapstructure:"loss,omitempty"`

	// Points corresponds to the JSON schema field "points".
	Points *float64 `json:"points,omitempty" yaml:"points,omitempty" mapstructure:"points,omitempty"`

	// Series corresponds to the JSON schema field "series".
	Series *NBAAPIGamesResponseJsonResponseElemScoresHomeSeries `json:"series,omitempty" yaml:"series,omitempty" mapstructure:"series,omitempty"`

	// Win corresponds to the JSON schema field "win".
	Win *float64 `json:"win,omitempty" yaml:"win,omitempty" mapstructure:"win,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemScoresHomeSeries struct {
	// Loss corresponds to the JSON schema field "loss".
	Loss *float64 `json:"loss,omitempty" yaml:"loss,omitempty" mapstructure:"loss,omitempty"`

	// Win corresponds to the JSON schema field "win".
	Win *float64 `json:"win,omitempty" yaml:"win,omitempty" mapstructure:"win,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemScoresVisitors struct {
	// Linescore corresponds to the JSON schema field "linescore".
	Linescore []string `json:"linescore,omitempty" yaml:"linescore,omitempty" mapstructure:"linescore,omitempty"`

	// Loss corresponds to the JSON schema field "loss".
	Loss *float64 `json:"loss,omitempty" yaml:"loss,omitempty" mapstructure:"loss,omitempty"`

	// Points corresponds to the JSON schema field "points".
	Points *float64 `json:"points,omitempty" yaml:"points,omitempty" mapstructure:"points,omitempty"`

	// Series corresponds to the JSON schema field "series".
	Series *NBAAPIGamesResponseJsonResponseElemScoresVisitorsSeries `json:"series,omitempty" yaml:"series,omitempty" mapstructure:"series,omitempty"`

	// Win corresponds to the JSON schema field "win".
	Win *float64 `json:"win,omitempty" yaml:"win,omitempty" mapstructure:"win,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemScoresVisitorsSeries struct {
	// Loss corresponds to the JSON schema field "loss".
	Loss *float64 `json:"loss,omitempty" yaml:"loss,omitempty" mapstructure:"loss,omitempty"`

	// Win corresponds to the JSON schema field "win".
	Win *float64 `json:"win,omitempty" yaml:"win,omitempty" mapstructure:"win,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemStatus struct {
	// Clock corresponds to the JSON schema field "clock".
	Clock interface{} `json:"clock,omitempty" yaml:"clock,omitempty" mapstructure:"clock,omitempty"`

	// Halftime corresponds to the JSON schema field "halftime".
	Halftime *bool `json:"halftime,omitempty" yaml:"halftime,omitempty" mapstructure:"halftime,omitempty"`

	// Long corresponds to the JSON schema field "long".
	Long *string `json:"long,omitempty" yaml:"long,omitempty" mapstructure:"long,omitempty"`

	// Short corresponds to the JSON schema field "short".
	Short *float64 `json:"short,omitempty" yaml:"short,omitempty" mapstructure:"short,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemTeams struct {
	// Home corresponds to the JSON schema field "home".
	Home *NBAAPIGamesResponseJsonResponseElemTeamsHome `json:"home,omitempty" yaml:"home,omitempty" mapstructure:"home,omitempty"`

	// Visitors corresponds to the JSON schema field "visitors".
	Visitors *NBAAPIGamesResponseJsonResponseElemTeamsVisitors `json:"visitors,omitempty" yaml:"visitors,omitempty" mapstructure:"visitors,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemTeamsHome struct {
	// Code corresponds to the JSON schema field "code".
	Code *string `json:"code,omitempty" yaml:"code,omitempty" mapstructure:"code,omitempty"`

	// ID corresponds to the JSON schema field "id".
	ID *float64 `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Logo corresponds to the JSON schema field "logo".
	Logo *string `json:"logo,omitempty" yaml:"logo,omitempty" mapstructure:"logo,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Nickname corresponds to the JSON schema field "nickname".
	Nickname *string `json:"nickname,omitempty" yaml:"nickname,omitempty" mapstructure:"nickname,omitempty"`
}

type NBAAPIGamesResponseJsonResponseElemTeamsVisitors struct {
	// Code corresponds to the JSON schema field "code".
	Code *string `json:"code,omitempty" yaml:"code,omitempty" mapstructure:"code,omitempty"`

	// ID corresponds to the JSON schema field "id".
	ID *float64 `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Logo corresponds to the JSON schema field "logo".
	Logo *string `json:"logo,omitempty" yaml:"logo,omitempty" mapstructure:"logo,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Nickname corresponds to the JSON schema field "nickname".
	Nickname *string `json:"nickname,omitempty" yaml:"nickname,omitempty" mapstructure:"nickname,omitempty"`
}
